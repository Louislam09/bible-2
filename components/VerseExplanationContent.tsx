import { useGoogleAI } from "@/hooks/useGoogleAI";
import { bibleState$ } from "@/state/bibleState";
import { modalState$ } from "@/state/modalState";
import { TTheme } from "@/types";
import React, { useEffect, useMemo, useState } from "react";
import {
  ActivityIndicator,
  Animated,
  StyleSheet,
  TouchableOpacity,
  View,
  Vibration,
  Alert,
} from "react-native";
import { WebView } from "react-native-webview";
import Icon from "./Icon";
import { Text } from "./Themed";
import * as Clipboard from "expo-clipboard";
import * as Print from "expo-print";
import * as Sharing from "expo-sharing";
import { iconSize } from "@/constants/size";

type VerseExplanationProps = {
  theme: TTheme;
  fontSize: number;
};

const DEFAULT_HEIGHT = 1200;
const EXTRA_HEIGHT_TO_ADJUST = 150;
export const mock = `üìñ **Vers√≠culo y Referencia:**

"En el principio cre√≥ Dios los cielos y la tierra." (G√©nesis 1:1 RVR1960)


üîç **An√°lisis Ling√º√≠stico y Exeg√©tico:**

* **En el principio (◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™ - *Bereshit*):** Esta palabra hebrea, que da t√≠tulo al libro de G√©nesis, significa literalmente "en el comienzo" o "en la cabeza".  No implica un comienzo en el tiempo en el sentido de un punto espec√≠fico, sino un comienzo absoluto y primordial.  La preposici√≥n ◊ë÷∞÷º ( *bet* ) indica una relaci√≥n de tiempo o lugar, situando la creaci√≥n en el punto inicial de todo lo existente.

* **Cre√≥ (◊ë÷∏◊®÷∏◊ê - *bara*):** Este verbo hebreo es significativo.  No es el verbo com√∫n para "hacer" o "formar" (*asah*), sino un verbo que implica creaci√≥n *ex nihilo*, es decir, creaci√≥n de la nada.  Implica un acto de poder divino √∫nico y trascendente, diferente a cualquier proceso de formaci√≥n o transformaci√≥n de materia preexistente.

* **Dios (◊ê÷±◊ú÷π◊î÷¥◊ô◊ù - *Elohim*):**  Este t√©rmino hebreo es un sustantivo plural que se usa para referirse a la deidad.  Aunque gramaticalmente plural, se usa con un verbo singular en este vers√≠culo, reflejando la unicidad de Dios a pesar de la pluralidad inherente a su naturaleza (un tema que se explora en otros pasajes b√≠blicos).

* **Los cielos (◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù - *hashamayim*):** Se refiere a los cielos, incluyendo el firmamento y todo lo que est√° m√°s all√°.

* **Y la tierra (◊ï÷∞◊î÷∏◊ê÷∏◊®÷∂◊• - *vehaaretz*):** Se refiere a la tierra, incluyendo todo lo que contiene.  La conjunci√≥n ◊ï÷∞ (*ve*) indica una uni√≥n inseparable entre los cielos y la tierra, ambos creados por Dios en este acto primordial.


üìö **Referencias B√≠blicas Relacionadas:**

* **Salmo 33:6:** "Por la palabra de Jehov√° fueron hechos los cielos, y todo el ej√©rcito de ellos por el aliento de su boca."  Este vers√≠culo enfatiza la creaci√≥n por medio de la palabra de Dios, mostrando el poder creativo inherente a su habla.

* **Hebreos 11:3:** "Por la fe entendemos haber sido constituido el universo por la palabra de Dios, de modo que lo que se ve fue hecho de lo que no se ve√≠a."  Este pasaje conecta la creaci√≥n con la fe, destacando la naturaleza invisible de la fuente de la creaci√≥n y la dependencia de la fe para comprenderla.

* **Isa√≠as 45:18:** "Porque as√≠ dijo Jehov√°, que cre√≥ los cielos; √©l es Dios, el que form√≥ la tierra y la hizo, √©l la estableci√≥; no la cre√≥ para estar desierta, sino la form√≥ para ser habitada: Yo soy Jehov√°, y no hay otro."  Este vers√≠culo reafirma la creaci√≥n de los cielos y la tierra por Jehov√°, enfatizando su unicidad y prop√≥sito en la creaci√≥n.

* **Apocalipsis 4:11:** "Se√±or nuestro, Dios nuestro, digno eres de recibir la gloria y la honra y el poder; porque t√∫ creaste todas las cosas, y por tu voluntad existen y fueron creadas."  Este pasaje, desde el final de la Biblia, reafirma la creaci√≥n de todas las cosas por Dios y su soberan√≠a sobre ellas.


üß† **Conclusi√≥n Exeg√©tica:**

G√©nesis 1:1 declara la creaci√≥n *ex nihilo* de los cielos y la tierra por Dios en un acto primordial.  El vers√≠culo establece el fundamento teol√≥gico de la creaci√≥n, atribuyendo la existencia de todo lo que es a un acto √∫nico y trascendente de Dios, utilizando un lenguaje que enfatiza su poder y soberan√≠a.  Este acto inicial es fundamental para la comprensi√≥n de la narrativa b√≠blica completa, estableciendo el contexto para la creaci√≥n del hombre y la relaci√≥n entre Dios y su creaci√≥n.  La creaci√≥n no es un proceso gradual o evolutivo, sino un acto de voluntad divina que da origen a todo lo existente.`;

const VerseExplanationContent: React.FC<VerseExplanationProps> = ({
  theme,
  fontSize,
}) => {
  const verse = bibleState$.verseToExplain.get();
  const { explanation, loading, error, fetchExplanation } = useGoogleAI();
  //   const explanation = mock;
  const [fadeAnim] = useState(new Animated.Value(0));
  const [slideAnim] = useState(new Animated.Value(-50));
  const [height, setHeight] = useState(DEFAULT_HEIGHT);
  const [retryCount, setRetryCount] = useState(0);
  const [copySuccess, setCopySuccess] = useState(false);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const webViewRef = React.useRef<WebView>(null);

  const htmlResponse = useMemo(() => {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explicaci√≥n B√≠blica - IA</title>
        <style>
            body {
                font-family: 'Georgia', 'Times New Roman', serif;
                padding: 30px;
                line-height: 1.8;
                color: ${theme.colors.text};
                max-width: 100%;
                margin: 0 auto;
                background: transparent;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }
            .header {
                text-align: center;
                margin-bottom: 40px;
                padding-bottom: 20px;
                border-bottom: 2px solid ${theme.colors.border};
            }
            .title {
                font-size: 24px;
                font-weight: bold;
                color: ${theme.colors.text};
                margin-bottom: 10px;
            }
            .subtitle {
                font-size: 14px;
                color: ${theme.colors.text};
                font-style: italic;
            }
            .content {
                background: transparent;
                padding: 0;
                border-radius: 0;
                box-shadow: none;
                width: 100%;
                box-sizing: border-box;
            }
            h1, h2, h3 {
                color: ${theme.colors.text};
                margin-top: 30px;
                margin-bottom: 15px;
            }
            p {
                margin-bottom: 15px;
                text-align: justify;
            }
            strong {
                color: ${theme.colors.notification};
            }
            em {
                color: ${theme.colors.text};
            }
            blockquote {
                border-left: 4px solid ${theme.colors.notification};
                padding-left: 20px;
                margin: 20px 0;
                font-style: italic;
                padding: 15px 20px;
                border-radius: 0;
            }
            .footer {
                text-align: center;
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid ${theme.colors.border};
                font-size: 12px;
                color: ${theme.colors.text};
            }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">üìñ Explicaci√≥n B√≠blica</div>
            <div class="subtitle">Generado por Inteligencia Artificial ‚Ä¢ ${new Date().toLocaleDateString(
              "es-ES"
            )}</div>
        </div>
        <div class="content">
            ${
              explanation
                ?.replace(/\n\n/g, "</p><p>")
                .replace(/\n/g, "<br/>")
                .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
                .replace(/\*(.*?)\*/g, "<em>$1</em>")
                .replace(/^(.+)$/gm, "<p>$1</p>") || ""
            }
        </div>
        <div class="footer">
            Esta explicaci√≥n fue generada por IA y puede contener interpretaciones subjetivas.<br/>
            Siempre consulte con l√≠deres espirituales calificados para un estudio m√°s profundo.
        </div>
        <script>
            window.ReactNativeWebView.postMessage(document.body.scrollHeight);
        </script>
    </body>
    </html>
  `;
  }, [explanation]);

  useEffect(() => {
    if (verse.text) {
      fetchExplanation(verse);
      // Fade in animation
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 600,
          useNativeDriver: true,
        }),
        Animated.timing(slideAnim, {
          toValue: 0,
          duration: 600,
          useNativeDriver: true,
        }),
      ]).start();
    }
  }, [verse, retryCount]);

  const handleRetry = () => {
    setRetryCount((prev) => prev + 1);
  };

  const handleCopy = async () => {
    try {
      await Clipboard.setStringAsync(explanation || "");
      setCopySuccess(true);
      Vibration.vibrate(50); // Haptic feedback
      setTimeout(() => setCopySuccess(false), 3000);
    } catch (error) {
      console.error("Error copying text:", error);
      Alert.alert("Error", "No se pudo copiar el texto");
    }
  };

  const generatePDF = async () => {
    setIsGeneratingPDF(true);
    try {
      const { uri } = await Print.printToFileAsync({
        html: htmlResponse,
        base64: false,
      });

      await Sharing.shareAsync(uri, {
        mimeType: "application/pdf",
        dialogTitle: "Compartir Explicaci√≥n B√≠blica",
      });
    } catch (error) {
      console.error("Error generating/sharing PDF:", error);
      Alert.alert("Error", "No se pudo generar el PDF");
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  const styles = getStyles(theme, fontSize);

  return (
    <Animated.View
      style={[
        styles.container,
        {
          opacity: fadeAnim,
          transform: [{ translateY: slideAnim }],
          height: height + EXTRA_HEIGHT_TO_ADJUST,
        },
      ]}
    >
      {/* Header with Actions */}
      <View style={styles.header}>
        <View style={styles.actionContainer}>
          <TouchableOpacity
            style={[styles.actionItem, copySuccess && styles.successButton]}
            onPress={handleCopy}
            disabled={copySuccess}
          >
            <Icon
              name={copySuccess ? "CircleCheck" : "Copy"}
              size={iconSize}
              color={copySuccess ? "#10b981" : theme.colors.notification}
            />
            <Text
              style={[
                styles.actionItemText,
                { color: copySuccess ? "#10b981" : theme.colors.text },
              ]}
            >
              {copySuccess ? "¬°Copiado!" : "Copiar"}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.actionItem, isGeneratingPDF && styles.loadingButton]}
            onPress={generatePDF}
            disabled={isGeneratingPDF}
          >
            <Icon
              name={isGeneratingPDF ? "Loader" : "Share"}
              size={iconSize}
              color={theme.colors.notification}
            />
            <Text style={styles.actionItemText}>
              {isGeneratingPDF ? "Generando..." : "Compartir PDF"}
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Content */}
      <View style={styles.webviewWrapper}>
        {loading && <LoadingComponent theme={theme} fontSize={fontSize} />}
        {error && (
          <ErrorComponent
            theme={theme}
            fontSize={fontSize}
            error={error}
            onRetry={handleRetry}
          />
        )}
        {!loading && !error && (
          <WebView
            ref={webViewRef}
            style={{ flex: 1, backgroundColor: "transparent" }}
            source={{ html: htmlResponse }}
            onMessage={(event) => {
              console.log("event", event.nativeEvent.data);
              const isNumber = !isNaN(+event.nativeEvent.data);
              if (isNumber) {
                setHeight(+event.nativeEvent.data || DEFAULT_HEIGHT);
              }
            }}
            scrollEnabled
          />
        )}
      </View>
    </Animated.View>
  );
};

// Loading Component
const LoadingComponent: React.FC<{
  theme: TTheme;
  fontSize: number;
}> = ({ theme, fontSize }) => {
  const [dots, setDots] = useState("");

  useEffect(() => {
    const interval = setInterval(() => {
      setDots((prev) => (prev.length >= 3 ? "" : prev + "."));
    }, 500);
    return () => clearInterval(interval);
  }, []);

  return (
    <View style={getLoadingStyles(theme).container}>
      <ActivityIndicator size="large" color={theme.colors.notification} />
      <Text
        style={[getLoadingStyles(theme).text, { fontSize: fontSize * 0.9 }]}
      >
        Analizando el vers√≠culo{dots}
      </Text>
      <Text
        style={[getLoadingStyles(theme).subText, { fontSize: fontSize * 0.8 }]}
      >
        Esto puede tomar unos segundos
      </Text>
    </View>
  );
};

// Error Component
const ErrorComponent: React.FC<{
  theme: TTheme;
  fontSize: number;
  error: string;
  onRetry: () => void;
}> = ({ theme, fontSize, error, onRetry }) => {
  return (
    <View style={getErrorStyles(theme).container}>
      <Text style={getErrorStyles(theme).icon}>‚ö†Ô∏è</Text>
      <Text style={[getErrorStyles(theme).title, { fontSize: fontSize * 1.1 }]}>
        Error al obtener explicaci√≥n
      </Text>
      <Text
        style={[getErrorStyles(theme).message, { fontSize: fontSize * 0.9 }]}
      >
        {error}
      </Text>
      <TouchableOpacity
        style={getErrorStyles(theme).retryButton}
        onPress={onRetry}
      >
        <Text
          style={[
            getErrorStyles(theme).retryText,
            { fontSize: fontSize * 0.9 },
          ]}
        >
          üîÑ Intentar de nuevo
        </Text>
      </TouchableOpacity>
    </View>
  );
};

const getStyles = (theme: TTheme, fontSize: number) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: "transparent",
      width: "100%",
    },
    header: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      width: "90%",
      backgroundColor: "transparent",
    },
    actionContainer: {
      flexDirection: "row",
      backgroundColor: "transparent",
      alignItems: "center",
      justifyContent: "space-between",
    },
    actionItem: {
      alignItems: "center",
      marginHorizontal: 4,
      paddingVertical: 2,
      paddingHorizontal: 4,
      paddingLeft: 10,
    },
    successButton: {
      backgroundColor: "#10b981" + "20",
    },
    loadingButton: {
      opacity: 0.7,
    },
    actionItemText: {
      fontSize: 12,
      color: theme.colors.text,
      textAlign: "center",
      fontWeight: "bold",
    },
    subHeader: {
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      width: "90%",
      paddingVertical: 5,
      backgroundColor: "transparent",
    },
    subTitle: {
      justifyContent: "space-between",
      textTransform: "capitalize",
      fontSize: 20,
      textAlign: "center",
      paddingVertical: 5,
      textDecorationLine: "underline",
      color: theme.colors.text,
      fontWeight: "bold",
    },
    webviewWrapper: {
      width: "100%",
      height: "100%",
      backgroundColor: "transparent",
    },
  });

const getLoadingStyles = (theme: TTheme) =>
  StyleSheet.create({
    container: {
      alignItems: "center",
      justifyContent: "center",
      paddingVertical: 40,
    },
    text: {
      marginTop: 16,
      color: theme.colors.text,
      fontWeight: "500",
    },
    subText: {
      marginTop: 8,
      color: theme.colors.text,
      opacity: 0.6,
      textAlign: "center",
    },
  });

const getErrorStyles = (theme: TTheme) =>
  StyleSheet.create({
    container: {
      alignItems: "center",
      justifyContent: "center",
      paddingVertical: 32,
    },
    icon: {
      fontSize: 48,
      marginBottom: 16,
    },
    title: {
      fontWeight: "600",
      color: "#FF6B6B",
      marginBottom: 12,
      textAlign: "center",
    },
    message: {
      color: theme.colors.text,
      opacity: 0.7,
      textAlign: "center",
      marginBottom: 24,
      paddingHorizontal: 20,
    },
    retryButton: {
      backgroundColor: theme.colors.notification,
      paddingHorizontal: 24,
      paddingVertical: 12,
      borderRadius: 8,
    },
    retryText: {
      color: "white",
      fontWeight: "600",
    },
  });

export default VerseExplanationContent;
