name: React Native CI/CD

on:
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - prod-apk
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_OPTIONS: --openssl-legacy-provider

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  build-and-deploy:
    needs: check-skip
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Setup Bun cache
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        run: |
          bun install
          bun add -g eas-cli@latest
          bun add -D react-native-svg-transformer
          
      - name: 📦 Ensure Expo Router dependencies are installed
        run: |
          echo "Ensuring Expo Router dependencies are properly installed..."
          bun add expo-router@latest
          bun add expo-constants@latest
          echo "Expo Router dependencies verified"

      - name: 📱 Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: 🔄 Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: 📋 Ensure package.json main entry is correct for Expo Router
        run: |
          # Check if jq is installed, if not install it
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Ensure the main entry in package.json is correct for Expo Router
          if [ -f ./package.json ]; then
            # Create a backup
            cp package.json package.json.bak
            # Update the package.json to use expo-router/entry
            jq '.main = "expo-router/entry"' package.json > package.json.tmp && mv package.json.tmp package.json
            echo "Updated package.json main entry for Expo Router"
            cat package.json | grep "main"
          else
            echo "package.json not found"
            exit 1
          fi

      - name: 📋 Verify project configuration
        run: |
          echo "Verifying project configuration..."
          echo "Package.json main entry:"
          cat package.json | grep "main"
          echo "Metro config exists:"
          ls -la metro.config.js
          echo "App directory structure:"
          ls -la app/
          echo "Checking for _layout.tsx in app directory:"
          ls -la app/_layout.tsx || echo "_layout.tsx not found"
          echo "Checking for index.tsx or home.tsx in app directory:"
          ls -la app/index.tsx app/home.tsx 2>/dev/null || echo "No index.tsx or home.tsx found"
          
      - name: 📋 Run Expo Doctor to check for issues
        run: |
          echo "Running Expo Doctor to check for configuration issues..."
          npx expo doctor --fix-dependencies || true
          echo "Expo Doctor completed"

      - name: 📱 Build Production APK
        if: github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-apk' || github.event_name == 'push'
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform android --profile production-apk --local --non-interactive --output=./app-prod.apk
        env:
          NODE_ENV: production

      - name: 📦 Upload build artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ./app-prod.apk
          retention-days: 7
