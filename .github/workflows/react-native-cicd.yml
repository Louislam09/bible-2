name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - dev
          - prod-apk
          - prod-aab
          - all
      skip_to_build_info:
        type: boolean
        description: "Skip to build info step"
        default: false

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_OPTIONS: --openssl-legacy-provider
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  build-and-release:
    needs: check-skip
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: üèó Checkout repository
        uses: actions/checkout@v4

      - name: üèó Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì¶ Setup Bun cache
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: üì¶ Install dependencies
        run: |
          bun install
          bun add -g eas-cli@latest
          bun add -D react-native-svg-transformer
          
      - name: üì¶ Ensure Expo Router dependencies are installed
        run: |
          echo "Ensuring Expo Router dependencies are properly installed..."
          bun add expo-router@latest
          bun add expo-constants@latest
          echo "Expo Router dependencies verified"

      - name: üì± Setup EAS build cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-local
          key: ${{ runner.os }}-eas-build-local-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-build-local-

      - name: üîÑ Verify EAS CLI installation
        run: |
          echo "EAS CLI version:"
          eas --version

      - name: üìã Ensure package.json main entry is correct for Expo Router
        run: |
          # Check if jq is installed, if not install it
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Ensure the main entry in package.json is correct for Expo Router
          if [ -f ./package.json ]; then
            # Create a backup
            cp package.json package.json.bak
            # Update the package.json to use expo-router/entry
            jq '.main = "expo-router/entry"' package.json > package.json.tmp && mv package.json.tmp package.json
            echo "Updated package.json main entry for Expo Router"
            cat package.json | grep "main"
          else
            echo "package.json not found"
            exit 1
          fi

      - name: üìã Verify project configuration
        run: |
          echo "Verifying project configuration..."
          echo "Package.json main entry:"
          cat package.json | grep "main"
          echo "Metro config exists:"
          ls -la metro.config.js
          echo "App directory structure:"
          ls -la app/
          echo "Checking for _layout.tsx in app directory:"
          ls -la app/_layout.tsx || echo "_layout.tsx not found"
          echo "Checking for index.tsx or home.tsx in app directory:"
          ls -la app/index.tsx app/home.tsx 2>/dev/null || echo "No index.tsx or home.tsx found"
          
      - name: üìã Run Expo Doctor to check for issues
        run: |
          echo "Running Expo Doctor to check for configuration issues..."
          npx expo doctor --fix-dependencies || true
          echo "Expo Doctor completed"

      - name: üì± Build Development APK
        if: (github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'dev' || github.event_name == 'push') && github.event.inputs.skip_to_build_info != 'true'
        run: |
          # Build with increased memory limit and proper environment setup
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          export EXPO_ROUTER_APP_ROOT=./app
          eas build --platform android --profile development --local --non-interactive --output=./app-dev.apk
        env:
          NODE_ENV: development

      - name: Install Expo CLI
        run: |
          bun add -g expo-cli@latest

      - name: üì± Build Production APK
        if: (github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-apk' || github.event_name == 'push') && github.event.inputs.skip_to_build_info != 'true'
        run: |
          echo "=== STARTING PRODUCTION APK BUILD ==="
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          export EXPO_ROUTER_APP_ROOT=./app
          eas build --platform android --profile production-apk --local --non-interactive --output=./app-prod.apk
          echo "=== BUILD COMPLETED ==="
          echo "Checking if output file exists:"
          ls -la ./app-prod.apk || echo "Output file not found"
        env:
          NODE_ENV: production

      - name: üì± Build Production AAB
        if: (github.event.inputs.buildType == 'all' || github.event.inputs.buildType == 'prod-aab' || github.event_name == 'push') && github.event.inputs.skip_to_build_info != 'true'
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          export EXPO_ROUTER_APP_ROOT=./app
          eas build --platform android --profile production --local --non-interactive --output=./app-prod.aab
        env:
          NODE_ENV: production

      - name: üè∑Ô∏è Generate build information
        id: build-info
        run: |
          # Extract version from app.config.ts using Node.js
          VERSION=$(node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Read app.config.ts
            const configContent = fs.readFileSync('./app.config.ts', 'utf8');
            
            // Extract version using regex
            const versionMatch = configContent.match(/version:\s*['\"]([^'\"]+)['\"]/);
            if (versionMatch) {
              console.log(versionMatch[1]);
            } else {
              console.log('1.0.0'); // fallback version
            }
          ")
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          echo "Build number: $BUILD_NUMBER"
          
          # Generate changelog from commit messages since last tag
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            git log $LAST_TAG..HEAD --pretty=format:"- %s" > changelog.md
          else
            git log --pretty=format:"- %s" -n 10 > changelog.md
          fi

      - name: üìù Check build files exist
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_to_build_info != 'true') || github.event_name == 'push'
        run: |
          echo "=== DEBUGGING BUILD FILES ==="
          echo "Current directory: $(pwd)"
          echo "Listing all files in current directory:"
          ls -la
          echo ""
          echo "Looking for APK and AAB files:"
          find . -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files found"
          echo ""
          echo "Checking if build files exist based on build type..."
          ls -la *.apk *.aab 2>/dev/null || echo "No build files found in current directory"
          
          # Determine which files should exist based on build type
          EXPECTED_FILES=""
          if [ "${{ github.event.inputs.buildType }}" == "dev" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            EXPECTED_FILES="$EXPECTED_FILES ./app-dev.apk"
          fi
          if [ "${{ github.event.inputs.buildType }}" == "prod-apk" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            EXPECTED_FILES="$EXPECTED_FILES ./app-prod.apk"
          fi
          if [ "${{ github.event.inputs.buildType }}" == "prod-aab" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            EXPECTED_FILES="$EXPECTED_FILES ./app-prod.aab"
          fi
          
          echo "Expected files: $EXPECTED_FILES"
          
          # Check if all expected files exist
          ALL_EXIST=true
          for file in $EXPECTED_FILES; do
            if [ ! -f "$file" ]; then
              echo "Missing expected file: $file"
              ALL_EXIST=false
            else
              echo "Found file: $file"
              echo "File size: $(ls -lh $file | awk '{print $5}')"
            fi
          done
          
          if [ "$ALL_EXIST" = true ]; then
            echo "All expected build files exist"
            echo "build_files_exist=true" >> $GITHUB_OUTPUT
          else
            echo "Some expected build files are missing"
            echo "build_files_exist=false" >> $GITHUB_OUTPUT
          fi
        id: check-build-files

      - name: üìù Check GitHub Token Permissions
        if: (github.event_name == 'workflow_dispatch') || (github.event_name == 'push')
        run: |
          echo "=== CHECKING GITHUB TOKEN PERMISSIONS ==="
          echo "Testing GitHub API access..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases \
               | head -20 || echo "Failed to access GitHub API"
          echo "=== END TOKEN CHECK ==="

      # - name: üìù Create GitHub Release
      #   if: (github.event_name == 'workflow_dispatch') || (github.event_name == 'push')
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     draft: true
      #     name: "Release v${{ steps.build-info.outputs.version }}-${{ steps.build-info.outputs.build_number }}"
      #     tag_name: "v${{ steps.build-info.outputs.version }}-${{ steps.build-info.outputs.build_number }}"
      #     body_path: changelog.md
      #     files: |
      #       ./app-dev.apk
      #       ./app-prod.apk
      #       ./app-prod.aab
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üì¶ Upload build artifacts to GitHub
        if: (github.event_name == 'workflow_dispatch' ) || github.event_name == 'push'
        run: |
          # Create a list of files to upload based on build type
          FILES_TO_UPLOAD=""
          
          # Check for dev APK
          if [ "${{ github.event.inputs.buildType }}" == "dev" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            if [ -f "./app-dev.apk" ]; then
              FILES_TO_UPLOAD="$FILES_TO_UPLOAD ./app-dev.apk"
            fi
          fi
          
          # Check for prod APK
          if [ "${{ github.event.inputs.buildType }}" == "prod-apk" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            if [ -f "./app-prod.apk" ]; then
              FILES_TO_UPLOAD="$FILES_TO_UPLOAD ./app-prod.apk"
            fi
          fi
          
          # Check for prod AAB
          if [ "${{ github.event.inputs.buildType }}" == "prod-aab" ] || [ "${{ github.event.inputs.buildType }}" == "all" ] || [ "${{ github.event_name }}" == "push" ]; then
            if [ -f "./app-prod.aab" ]; then
              FILES_TO_UPLOAD="$FILES_TO_UPLOAD ./app-prod.aab"
            fi
          fi
          
          echo "Files to upload as artifacts: $FILES_TO_UPLOAD"
          
          if [ -n "$FILES_TO_UPLOAD" ]; then
            # Use gh command to upload artifacts
            for file in $FILES_TO_UPLOAD; do
              echo "Uploading $file as artifact..."
              gh run upload $file --name app-builds
            done
          else
            echo "No build files to upload as artifacts"
          fi
